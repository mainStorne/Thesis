"""empty message

Revision ID: ecea92fc2a3b
Revises:
Create Date: 2025-05-24 16:58:59.270496

"""
from collections.abc import Sequence
from typing import Union

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.ext.asyncio import AsyncConnection, AsyncSession

from src.api.db import Account
from src.api.repos.account_repo import account_repo

# revision identifiers, used by Alembic.
revision: str = 'ecea92fc2a3b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""

# create uuid_generate_v4 func

    async def create_uuid_generate_v4(conn: AsyncConnection):
        await conn.exec_driver_sql('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')

    op.run_async(create_uuid_generate_v4)
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('accounts',
                    sa.Column('id', sa.Uuid(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('login', sa.String(length=80), nullable=False),
                    sa.Column('hashed_password',
                              sqlmodel.sql.sqltypes.AutoString(), nullable=False),
                    sa.Column('last_login', sa.DateTime(timezone=True),
                              server_default=sa.text('current_timestamp'), nullable=True),
                    sa.Column('is_stuff', sa.Boolean(), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('login')
                    )
    op.create_table('groups',
                    sa.Column('id', sa.Uuid(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('name', sa.String(length=265), nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('project_images',
                    sa.Column('id', sa.Uuid(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('name', sa.String(length=128), nullable=False),
                    sa.Column('dockerfile', sqlmodel.sql.sqltypes.AutoString(),
                              nullable=False),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('projects',
                    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text(
                        'current_timestamp'), nullable=False),
                    sa.Column('updated_at', sa.DateTime(
                        timezone=True), nullable=True),
                    sa.Column('id', sa.Uuid(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('project_image_id', sa.Uuid(), nullable=False),
                    sa.Column('account_id', sa.Uuid(), nullable=False),
                    sa.Column('name', sa.String(length=128), nullable=False),
                    sa.Column(
                        'cpu', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column(
                        'ram', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
                    sa.Column('byte_size', sa.Integer(), nullable=False),
                    sa.Column('project_url', sqlmodel.sql.sqltypes.AutoString(),
                              nullable=False),
                    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
                    sa.ForeignKeyConstraint(['project_image_id'], [
                                            'project_images.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('students',
                    sa.Column('id', sa.Uuid(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('first_name', sa.String(
                        length=256), nullable=False),
                    sa.Column('middle_name', sa.String(
                        length=256), nullable=True),
                    sa.Column('last_name', sa.String(
                        length=256), nullable=False),
                    sa.Column('logical_limit', sa.Integer(), nullable=False),
                    sa.Column('logical_used', sa.Integer(), nullable=False),
                    sa.Column('group_id', sa.Uuid(), nullable=False),
                    sa.Column('account_id', sa.Uuid(), nullable=False),
                    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
                    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('teacher',
                    sa.Column('id', sa.Uuid(), server_default=sa.text(
                        'uuid_generate_v4()'), nullable=False),
                    sa.Column('account_id', sa.Uuid(), nullable=False),
                    sa.Column('first_name', sa.String(
                        length=256), nullable=False),
                    sa.Column('middle_name', sa.String(
                        length=256), nullable=True),
                    sa.Column('last_name', sa.String(
                        length=256), nullable=False),
                    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    # ### end Alembic commands ###

    async def create_admin_account(conn: AsyncConnection):
        session = AsyncSession(bind=conn)
        password = account_repo.hash_password('admin')
        account = Account(
            login='admin', hashed_password=password, is_stuff=True)
        session.add(account)
        await session.commit()

    op.run_async(create_admin_account)


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('teacher')
    op.drop_table('students')
    op.drop_table('projects')
    op.drop_table('project_images')
    op.drop_table('groups')
    op.drop_table('accounts')
    # ### end Alembic commands ###
