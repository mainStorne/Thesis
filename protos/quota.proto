syntax = "proto3";

package quota;



service Authorization {
    rpc LoginUser(AccountRequest) returns (LoginUserResponse);

      // Создание пользователя в системе, установка квоты на данного пользователя
      // добавление в базу данных mysql нового пользователя с принадлежащей только ему базой данных
      rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
}

service QuotaService {
    rpc CreateStudent(CreateStudentRequest) returns (CreateStudentResponse);
    rpc UploadUserApp(stream UploadUserAppRequest) returns (UploadUserAppResponse);
    rpc StartContainer(StartContainerRequest) returns (StartContainerResponse);
    rpc GetUserQuota(GetUserQuotaRequest) returns (GetUserQuotaResponse);
}

service Resource {
    // shared resource is mySQL
    // set in metadata resource path or username?
    rpc CreateSharedResource(CreateSharedResourceRequest) returns (stream CreateSharedResourceResponse);
    rpc UploadUserApp(stream UploadUserAppRequest) returns (UploadUserAppResponse);
    rpc StartContainer(StartContainerRequest) returns (StartContainerResponse);
}

message CreateSharedResourceRequest {
    string dockerfile_definition = 1;
}

message CreateSharedResourceResponse {
    string logs = 1;

}

message CreateStudentRequest {
    string quota = 1;
    string username = 2;
}


message CreateStudentResponse {
    bool ok = 1;
}


message GetUserQuotaRequest {
    string username = 1;
}

message GetUserQuotaResponse {
    string soft_limit = 1;
    string hard_limit = 2;
    string available_space = 3;
}

message AccountRequest {
    string login = 1;
    string password = 2;
}

message LoginUserResponse {
    string token = 1;
}


message CreateUserRequest {

    message Profile {
        string first_name = 1;
        optional string middle_name = 2;
        string last_name = 3;
        AccountRequest account = 4;
    }
    message Student {
        Profile profile = 1;
        string group_id = 2;
        string resource_limit = 3;

    }

    message Teacher {
        Profile profile = 1;
    }

    oneof user_profile {
        Student student = 1;
        Teacher teacher = 2;
    }


}



message StartContainerRequest {
    string container_id = 1;
}

message StartContainerResponse {

}

/**
  * загрузка архива пользователем приложения php, на стороне сервера происходит распаковка приложения создание под него docker file
  */
message UploadUserAppRequest {
    bytes chunk = 1;
}

message UploadUserAppResponse {
    string resource_id = 1;
}



message CreateUserResponse {
    string user_id = 1;
    string token = 2;

}
